plugins {
	id 'fabric-loom' version '1.10-SNAPSHOT'
	id 'maven-publish'
	id "com.modrinth.minotaur" version "2.+"
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	maven {
		name = "Ladysnake Mods"
		url = 'https://maven.ladysnake.org/releases'
	}
	maven { url "https://maven.blamejared.com/" }
	maven { url "https://maven.terraformersmc.com/releases/" }
}

loom {
	splitEnvironmentSourceSets()

	mods {
		"fairylights" {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}

	accessWidenerPath = file("src/main/resources/fairylights.accesswidener")
}

fabricApi {
	configureDataGeneration {
		client = true
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-base:${project.cca_version}"
	modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${project.cca_version}"
	modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-block:${project.cca_version}"
	modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-item:${project.cca_version}"

	include "dev.onyxstudios.cardinal-components-api:cardinal-components-base:${project.cca_version}"
	include "dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${project.cca_version}"
	include "dev.onyxstudios.cardinal-components-api:cardinal-components-block:${project.cca_version}"
	include "dev.onyxstudios.cardinal-components-api:cardinal-components-item:${project.cca_version}"

	modCompileOnly("dev.emi:emi-fabric:${emi_version}+${project.minecraft_version}") { transitive = false }
	if (project.enable_emi.toBoolean()) {
		modLocalRuntime("dev.emi:emi-fabric:${emi_version}+${project.minecraft_version}") { transitive = false }
	}

	modCompileOnly("mezz.jei:jei-${project.minecraft_version}-fabric:${project.jei_version}") { transitive = false }
	if (project.enable_jei.toBoolean()) {
		modLocalRuntime("mezz.jei:jei-${project.minecraft_version}-fabric:${project.jei_version}") { transitive = false }
	}
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": inputs.properties.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	inputs.property "archivesName", project.base.archivesName

	from("LICENSE") {
		rename { "${it}_${inputs.properties.archivesName}"}
	}
}

import com.modrinth.minotaur.dependencies.ModDependency

modrinth {
	token = '<PAT>';
	projectId = 'OuLVx5LM' // The ID of your Modrinth project. Slugs will not work.
	uploadFile = remapJar // Tells Minotaur to use the remapped jar
	gameVersions = ['1.20.1'] // An array of game versions the version supports
	loaders = ['fabric'] // Self-explanatory.
	dependencies = [
			new ModDependency('P7dR8mSH', 'required') // Creates a new required dependency on Fabric API
	]
}